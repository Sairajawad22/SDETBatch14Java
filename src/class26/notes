Collections Framework:
    It's a collection of classes and interfaces that help us store and manipulate the data efficiently.
Why we should use Collections Framework?
    1) It's flexible( we don't need to provide size beforehand).
    2) It's dynamic(all the classes can increase and decrease their size at run time).
    3) There are built-in methods to perform common tasks.
    4) pre-built data structures.
downsides of Collections framework:
    1)we can't use primitive data types we have to use wrapper classes which occupy 4 times more memory
    than a primitive.
    int num=10 // 4 memory locations
    Integer num1=10; //16 memory locations
Wrapper:
    Wrapper classes are object types for all the primitive types
why should we learn about the wrapper types?
    1) Because collections framework only supports wrapper types.
    2) There are built-in methods to perform common tasks.

Downsides:
1)we can't use primitive data types we have to use wrapper classes which occupy 4 times more memory
    than a primitive.
    int num=10 // 4 memory locations
    Integer num1=10; //16 memory locations
Boxing:
    Converting a primitive to its corresponding wrapper type by manually calling methods.
    int pnum=10;
    Integer wnum=new Integer(pnum);
AutoBoxing:
    conversion from primitive to a wrapper type but here we don't need to call any methods explicitly.
     int pnum=10;
     Integer wnum=pnum;
Unboxing:
    converting a wrapper to a primitive by calling a method.
    Integer wnum=new Integer(10);
    int pnum=wnum.intValue();
AutoUnboxing:
    converting a wrapper to a primitive without calling any methods.
    Integer wnum=new Integer(10);
    int pnum=wnum;
ArrayList Class:
    it is a classes in collections framework that allows us to store data like an array.
    some common methods from this class are 1) add() 2) remove 3) contains 4) size().
Iterator:
    its a mechanism that allows us to iterate and delete data from any class in collections framework.
    it has hasNext() next() remove().
why we should learn about Iterator?
    Because loops are not safe when we perform an operation that can change the size of a data structure.
    ArrayList Vs LinkedList
        Both of the classes implement the list interface which means both of them will have same methods.
    ArrayList:
        uses an array behind the scenes to store the data.
        we should use arrayList when we are retrieving the data most of the time and not inserting the data in the start or in-between
        if we have to shift the data.
        to the list.
    LinkedList:
        Linked-list does not store the data in consecutive memory locations that's why it is easier to insert and remove the data from anywhere
        in a list.
        if you are going to manipulate the data(shifting of elements) always use linked-list.

    if most of the time you use add or remove method then use linkedList.
    if most of the time you use get method use ArrayList.

    Set:
    set is another data structure inside collection framework. it is next set of classes an interfaces. It has very simalar methods to a list but there is unique
    thing about the set is that it doesn't allow duplicate value. this is the only different between set and arrylist. it is good to use
    when we don't need duplicate values

     There are three types of set:

     1) HashSet
     2) LinkedHashedSet
     3) TreeSet




MY OWN NOTE======
    linkedList does not store the data in straight line in consecutive memory location that is why removing or inserting data in between very efficient
    when we use an arraylist
    On the other hand arraylist they store data in a straight line in consecutive memory location and if we want to insert something in between
    and if the list very big our computer has to do a lot of work. basically it has to shift all the elements to the right

